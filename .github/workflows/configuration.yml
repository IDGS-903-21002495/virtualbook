name: CI/CD â€¢ Deploy to Staging

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npx ng build --configuration=staging

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-staging
          path: dist/
          retention-days: 7

      - name: Generate build summary
        run: |
          echo "### Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "Artifacts uploaded and ready for testing" >> $GITHUB_STEP_SUMMARY

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Generate test summary
        if: always()
        run: |
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Tests executed successfully" >> $GITHUB_STEP_SUMMARY
          echo "Coverage report available in artifacts" >> $GITHUB_STEP_SUMMARY

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: dist/

      - name: List dist contents
        run: ls -R dist

      - name: Install Netlify CLI
        run: npm install -g netlify-cli

      - name: Deploy to Netlify
        run: |
          echo "Checking directory structure..."
          ls -la dist/
          
          if [ -d "dist/browser" ]; then
            echo "Found dist/browser directory"
            ls -la dist/browser/
            echo "Deploying from dist/browser"
            netlify deploy --dir=dist/browser --prod --message "staging deployment ${{ github.sha }}"
          elif [ -d "dist/virtualbook/browser" ]; then
            echo "Found dist/virtualbook/browser directory"
            ls -la dist/virtualbook/browser/
            echo "Deploying from dist/virtualbook/browser"
            netlify deploy --dir=dist/virtualbook/browser --prod --message "staging deployment ${{ github.sha }}"
          else
            echo "Using dist directory"
            ls -la dist/
            echo "Deploying from dist"
            netlify deploy --dir=dist --prod --message "staging deployment ${{ github.sha }}"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.VIRTUALBOOK }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}